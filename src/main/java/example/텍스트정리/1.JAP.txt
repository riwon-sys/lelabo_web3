1. console project  [ java , jdbc ]                                 + x
2. jsp project      [ java(servlet) , jdbc ]                        + (web)JSP(html+js+css)
3. spring project   [ spring( java(servlet) ) , mybatis(jdbc) ]     + (web)REACT(html+js+css)
4. spring project   [ spring( java(servlet) ) , JPA(jdbc) ]         + (app)Flutter(dart)
------------------------------------------------------------------------------------------
[ DB ]
    1. 데이터베이스 : 데이터들의 집합
    2. 테이버테이스 종류 : 관계형 데이터베이스(SQL)=Oracle/mysql , NOSQL = mongoDB
[JDBC]
    1. JABA DATABASE Connection : 자바에서 데이터베이스 연동하는 기술(인터페이스/클래스) 제공
    2. 주요 인터페이스 : Connection , PreparedStatement  , ResultSet
[myBatis]
    1. SQL Mapper 프레임워크 : SQL 를 자동으로 매핑 지원

[ORM]
    O : object , R : Relational , M : Mapping : 객체관계매핑
    1. 정의 : 객체지향 프로그램에서 사용하는 객체 와 (DB)관계형데이터베이스에서 사용하는 테이블과 매핑(연결)하는 기술
    2. 목적 : 개발자에게 편리성 제공
    3. 사용처 : JAVA , PYTHON 등등

[ Hibernate ]
    1. 정의 : 자바에서 ORM을 구현한 프레임워크 , ORM 사용할수 있는 라이브러리
    2. 목적 : 자바 개발자가 SQL 없이 데이터베이스 테이블를 다룬다.
       1. SQL 쿼리를 자동으로 생성하므로 개발자가 직접 SQL 작성하지 않아도 된다. [ 빠른 개발 ]
           -> 간단한 쿼리는 지원 , 복잡한 쿼리는 직접
       2. 자동으로 타입 변환 해준다.
       3. 코드 간결한 제공
       등등

[ JPA ]
    java , persistence(영속성/고집/집요하게계속하다.) , api
    1. 정의 : 자바에서 ORM을 사용할때 표준 API , 자바에서 ORM 어떻게 처리할지 정의한 라이브러리(인터페이스/어노테이션/클래스)
    2. 사용법
        1. 그레이들에 라이브러리 추가
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        2. application.properties 설정 , ( JDBC 별도 )

    3. JPA 설정
        1. JPA DDL 자동 처리 설정 : spring.jpa.hibernate.ddl-auto = create/update/none/create-drop/validate
            spring.jpa.hibernate.ddl-auto = create      : 서버가 실행 될때마다 기존 테이블 삭제하고 새로운 테이블 생성한다.[개발단계]
            spring.jpa.hibernate.ddl-auto = update      : 서버가 실행 될대마다 기존 테이블 유지하고 변경/추가 사항이 있을경우 수정/생성한다.[배포단계]
            spring.jpa.hibernate.ddl-auto = none        : 개발자가 직접 DDL 관리하겠다 (기본값)
            spring.jpa.hibernate.ddl-auto = create-drop : 서버가 종료 될때마다 테이블 삭제한다.
            spring.jpa.hibernate.ddl-auto = validate    : 서버가 실행 될때마다 엔티티 일치 여부 검사한다.
        2. 콘솔에서 JPA가 자동으로 처리하는 SQL 확인
            spring.jpa.show-sql = true                          : JPA 가 처리한 SQL 콘솔 표시
            spring.jpa.properties.hibernate.format_sql = true   : SQL 콘솔을 형식에 맞게 변환
            logging.level.org.hibernate.SQL = DEBUG             : JPA 가 처리한 SQL 디버그 콘솔 표시
            logging.level.org.hibernate.orm.jdbc.bind = TRACE   : JPA 가 처리한 SQL 매개변수 콘솔 표시

[ JPA 어노테이션 ]
    1. 용어/관점
        entity : DB테이블과 매핑된 객체(인스턴스)
        클래스      <-----> DB의 테이블
        인스턴스    <-----> 테이블의 레코드
            => 예시 : 학생 클래스                          학생 테이블
                      class 학생{                        table 학생(
                          int 학번                            학번 int
                          String 이름                         이름 varchar
                      }                                 )
                      학생 인스턴스1                       학생 레코드1
                      new 학생(1 , 유재석)                insert into 학생 value( 1 , 유재석 );
    2. 핵심
        1. @Entity : 해당 클래스를 테이블과 매핑 정의
        2. @Id : 엔티티 기본키( primary key ) 를 지정
            - 모든 엔티티/테이블 은 1개 이상의 pk를 갖는다.
            - JPA는 엔티티에 @Id 없으면 실행 조차 안된다.
                has no identifier (every '@Entity' class must declare or inherit at least one '@Id' or '@EmbeddedId' property)
        3. @Column : 엔티티의 속성 매핑
            - 자동 타입 매칭
            java            mysql
            int             int         정수
            String          varchar     문자열
            double          float       실수
            long            bigint
                            longtext
            LocalDate       date
            LocalDateTime   datetime

            1. nullable = true/false   : not null 제약조건
            2. unique = false/true     : qunique 제약조건
            3. name = "필드명"          : 필드명 정의, 생략시 자바 변수명
            4. length = 길이            : 길이가존재하는 필드의 길수 정의
            5. insertable = true/false : insert 할때 적용할 필드 설정
            6. updatable = true/false  : update 할때 적용할 필드 설정
            7. columnDefinition = "DB타입" : 실제 DB의 타입 정의

        4. @Table( name ="테이블명" )
            - DB테이블명 정의한다.
        5. @GeneratedValue( strategy = GenerationType.IDENTITY )
            - auto_increment 지원 , @Id(pk) 와 같이 사용한다.


[ JPA Repository ]
    1. 정의 : 기본적인 CRUD 작업을 자동으로 제공 , 추가적인 쿼리 가능
    2. 연동 사용법
        1. 인터페이스 생성
        2. 해당 인터페이스 위에 '@Repository' 빈 등록
        3. 해당 인터페이스 에 extends JpaRepository< 조작할클래스명 , PK의타입 >


        // CRUD 메소드
        // 1. .save( 저장할엔티티객체 );
        //      : 존재하지 않은 PK이면 INSERT , 존재하는 PK이면 UPDATE
        //      반환값 : INSERT/UPDATE 이후 영속(연결/매핑)된 객체(엔티티)

        // 2. .findAll();
        //      : 모든 엔티티를 select 한다.
        //      반환값 : 리스트타입으로 반환된다.

        // 3. .findById( 조회할pk값 )
        //     : pk값과 일치하는 엔티티를 select 한다.
        //     반환값 : Optional< 엔티티 >

        // 4. .deleteById( 삭제할pk값 )
        //     : pk값과 일치하는 엔티티를 delete 한다.
        //     반환값 : void(없다)

        // 5. .count()
        //     : 레코드(엔티티) 전체 개수 반환
        //     반환값 : long

        // 6. .existsById( 조회할pk값 )
        //    : pk값과 일차하는 엔티티가 존재하면 true , 아니면 false



        // Optional 클래스 : null 관련된 메소드 제공하는 클래스
        // -> nullPointerException 방지 하고자 객체를 포장하는 클래스
        // 주요메소드
        // 1. .isPresent() : null 이면 false , 객체 있으면 true
        // 2. .get() : 객체 반환
        // 3. .orElse( null일때 값 ) : 객체 반환하는데 null이면 지정된 값 반환
        // 4. .orElseThrow( 예외객체 ) : 객체 반환하는데 null이면 예외 발생

[ JPA Auditing ]
    1. 정의 : 엔티티의 생성/수정 변화를 기록하는걸 자동으로 감사하는 기능
    2. 목적 : SQL insert/update 감사하여 기록한다.
    3. 사용처 : BaseTime 상속 클래스( 엔티티들의 생성/수정 필드 )
    4. 사용법
        1. AppStart 클래스 위에 '@EnableJpaAuditing' 활성화 한다.
        2. BaseTime 클래스 생성
            @MappedSuperclass // 해당 클래스는 일반 엔티티가 아닌 상속(공통엔티티) 목적으로 사용되는 엔티티
            @EntityListeners( AuditingEntityListener.class) // 해당 클래스는 JPA 감사 대상 활성화
            @Getter // 롬복
            public class BaseTime{
                @CreatedDate // insert 시 자동으로 생성 날짜 기록
                private LocalDateTime createAt;

                @LastModifiedDate // update 시 자동으로 수정 날짜 기록
                private LocalDateTime updateAt;
            }
        3. BaseTime 클래스를 상속받을 클래스 에서 '자식클래스명 extends BaseTime'
            예] BookEntity extends BaseTime

[ JPA entity 와 DTO/VO 변환]
    일반적인 흐름도

    view        <---HTTP [ JS0N  <---변환----> DTO ]--->  Controller  <----- JPA[ DTO <--변환--> entity ]-----> Service --entity--> Repository --> DB
    1. react            @RequestBody                                                 doEntity()
    2. flutter          @ResponseBody                                                doDto()
    3. jsp
    4. 타임리프
    5. 머스테치

[ JPA 영속성:Persistence  ]
    1. 정의 : 자바객체를 데이터베이스와 연관 지어 생명주기를 관리하며 동기화하는 기능
    2. 영속성 컨텍스트 : 영속된 객체들을 관리하는 메모리 공간
    3. 영속성 매니저 : 영속된 객체들을 저장/조회/수정/삭제 가능하다.
        영속성 매니저 주요 메소드
            .persist( 비영속객체  );        : 영속성 (연결)부여
            .detach( 영속객체 );            : 영속성 (연결)해제
            .remove( 영속객체 );            : 영속성 삭제
            .merage( 준영속객체 );          : 영속성 ( 다시 연결)해제

